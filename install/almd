#!/usr/bin/env bash
# Almandine CLI wrapper script
# Executes almd-cli with all arguments.
# Compatible with macOS and Linux.

# Deferred self-update logic (POSIX)
SCRIPT_DIR="$(dirname "$0")"
UPDATE_PENDING="$SCRIPT_DIR/update_pending"
NEXT_DIR="$SCRIPT_DIR/next"
if [ -f "$UPDATE_PENDING" ] && [ -d "$NEXT_DIR" ]; then
  echo "Applying deferred update..."
  rm -rf "$SCRIPT_DIR/src"
  [ -f "$SCRIPT_DIR/almd" ] && rm -f "$SCRIPT_DIR/almd"
  [ -f "$SCRIPT_DIR/almd.ps1" ] && rm -f "$SCRIPT_DIR/almd.ps1"
  cp -r "$NEXT_DIR/src" "$SCRIPT_DIR/"
  # The release zip contains install scripts under src/install/, not install/ at root
  cp "$NEXT_DIR/src/install/almd" "$SCRIPT_DIR/" 2>/dev/null || true
  cp "$NEXT_DIR/src/install/almd.ps1" "$SCRIPT_DIR/" 2>/dev/null || true
  rm -rf "$NEXT_DIR" "$UPDATE_PENDING"
  # Print update success and new version
  CLI_BIN="$SCRIPT_DIR/almd-cli"
  if [ -x "$CLI_BIN" ]; then
    VERSION=$("$CLI_BIN" --version 2>/dev/null)
    if [ -n "$VERSION" ]; then
      echo "Almandine CLI updated successfully! New version: $VERSION"
    else
      echo "Almandine CLI updated successfully! (version unknown)"
    fi
  else
    echo "Almandine CLI updated successfully! (almd-cli not found to check version)"
  fi
fi

# Determine the location of the main executable
SCRIPT_DIR="$(dirname "$0")"
CLI_BIN="$SCRIPT_DIR/almd-cli"

if [ ! -x "$CLI_BIN" ]; then
  echo "Error: Main executable 'almd-cli' not found or not executable in $SCRIPT_DIR" >&2
  exit 1
fi

# Execute the Go binary, passing all arguments
exec "$CLI_BIN" "$@"
EXIT_CODE=$?
exit $EXIT_CODE
